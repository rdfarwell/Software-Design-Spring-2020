import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;

/**
 *  Class that generates a key file upon the user choosing option 1 in the main class. This class handles the writing
 *  of the key file and contains methods for generating a new key file and updating the given key file when passed
 *
 * @author Dean Farwell
 */
public class KeyGenerator {

    /**
     * This method creates a new key file called key.txt and is populated based on inputs given by the user.
     * @param n Number of keys the user wants within their key file
     * @param range The range the user would like the keys to be within
     * @throws IOException Thrown if there are issues creating the key.txt file
     */
    public static void generator(int n, int range) throws IOException {

        Random rand = new Random();
        FileWriter keyFile = new FileWriter("oral_exam1/S102_OneTimePad/src/key.txt"); // creates a file key.txt to write the keys to
        keyFile.write("0\n"); // all key files start at position zero for future transcoding

        for (int i = 0; i < n; i++) {
            keyFile.write(Integer.toString(rand.nextInt(range))); // generates random numbers to be written to file within given range
            if (i < (n - 1)) {
                keyFile.write(','); // places a comma after all but the last key entries
            }
        }

        keyFile.close();
    }

    /**
     * This method takes a key array and an updated position, and creates a new key file with the original keys, but with
     * an updated position.
     * @param s New starting position, generated by Encrypt
     * @param keys Array of Integers that contains the keys found in the user given file
     * @param length
     * @throws IOException Thrown if there are issues creating the key.txt file
     */
    public static void positionUpdate(int s, int[] keys, int length) throws IOException {
        FileWriter keyFile = new FileWriter("oral_exam1/S102_OneTimePad/src/key.txt"); // creates new key.txt file for updated position
        keyFile.write(s + "\n"); // writes the updated starting point at the top of the file

        for (int i = 0; i < length; i++) {
            keyFile.write(Integer.toString(keys[i])); // rewrites the known keys to the file, as saved in the key array
            if (i < (length - 1)) {
                keyFile.write(',');
            }
        }

        keyFile.close();
    }
}
